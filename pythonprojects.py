# -*- coding: utf-8 -*-
"""pythonProjects.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19vu235C5ZfqIBlASPrizK5ciuLC8zE2a
"""

import pandas as pd
import numpy as np

"""**Problem Statement 1: (Keep the relevant data)**
**Problem Statement 2: (Rename the Column names)**
"""

census=pd.read_csv('/content/census_2011.csv',usecols=['State name','District name','Population','Male','Female','Literate','Male_Literate','Female_Literate','Rural_Households','Urban_Households','Households','Age_Group_0_29','Age_Group_30_49','Age_Group_50','Age not stated'])

census

census.rename(columns={'State name':'State/UT',
               'District name':'District',
               'Male_Literate':'Literate_Male',
               'Female_Literate':'Literate_Female',
               'Rural_Households':'Households_Rural',
               'Urban_Households':'Households_Urban',
               'Age_Group_0_29':'Young_and_Adult',
               'Age_Group_30_49':'Middle_Aged',
               'Age_Group_50':'Senior_Citizen',
               'Age not stated':' Age_Not_Stated'},inplace=True)

census.head()

point1=census.copy()

"""**Problem Statement 3: (Rename State/UT Names)**"""

point1

census['State/UT']

def func(word):
  word=word.title()
  word=word.replace(' And ',' and ')
  return word

census['State/UT']=census['State/UT'].apply(func)

census['State/UT'].value_counts()

copy2=census.copy()

"""**Problem Statement 4: (New State/UT formation)**"""

telangana=pd.read_csv('/content/Telangana.txt',header=None)

liststate=telangana[0].tolist()

census.loc[census['District'].isin(liststate),'State/UT']='Telangana'

census[census['State/UT']=='Telangana']

"""***In 2019 Laddakh was formed after it split from Jammu and Kashmir, which included the districts Leh and Kargil.  Rename the State/UT From “Jammu and Kashmir” to “Laddakh” for the given districts.***"""

newdistrics=['Leh(Ladakh)','Kargil']

census.loc[census['District'].isin(newdistrics),'State/UT']='Laddakh'

census[census['State/UT']=='Laddakh']

census

copy3=census.copy()

"""**Problem Statement 5: (Find and process Missing Data)**


Find and store the percentage of data missing for each column.
Some data can be found and filled in by using information from other cells. Try to find the correct data by using information from other cells and filling it in. Find and store the percentage of data missing for each column.

Hint:
* Population = Male + Female
* Literate = Literate_Male + Literate_Female
* Population  = Young_and_Adult+  Middle_Aged + Senior_Citizen + 
* Age_Not_Stated
* Households = Households_Rural + Households_Urban 

"""

missingData=census.copy()

x=missingData.isnull().mean()*100

x

census

missingData['Male'].fillna(missingData['Population']-missingData['Female'],inplace=True)

missingData[missingData['Male'].isnull()]

missingData['Female'].fillna(missingData['Population']-missingData['Male'],inplace=True)

missingData[missingData['Female'].isnull()]

missingData['Population'].fillna(missingData['Female']+missingData['Male'],inplace=True)

missingData[missingData['Population'].isnull()]

missingData.isnull().sum()

#literate

missingData['Literate'].fillna(missingData['Literate_Male']+missingData['Literate_Female'],inplace=True)

missingData['Literate_Male'].fillna(missingData['Literate']-missingData['Literate_Female'],inplace=True)

missingData['Literate_Female'].fillna(missingData['Literate']-missingData['Literate_Male'],inplace=True)

missingData[missingData['Literate'].isnull()]

missingData['Households'].fillna(missingData['Households_Rural']+missingData['Households_Urban'],inplace=True)

missingData['Households_Rural'].fillna(missingData['Households']-missingData['Households_Urban'],inplace=True)

missingData['Households_Urban'].fillna(missingData['Households']-missingData['Households_Rural'],inplace=True)

missingData[missingData['Households_Rural'].isnull()]

#filling the one with population null value
missingData[missingData['Population'].isnull()]

missingData.isnull().sum()

#fill nulls of young_adult,middle_aged,senior_citizen,age_not_Stated

missingData['Young_and_Adult'].fillna(missingData['Population']-missingData['Senior_Citizen']-missingData['Middle_Aged']-missingData[' Age_Not_Stated'],inplace=True)

missingData.isnull().sum()

missingData['Senior_Citizen'].fillna(missingData['Population']-missingData['Young_and_Adult']-missingData['Middle_Aged']-missingData[' Age_Not_Stated'],inplace=True)

missingData.isnull().sum()

missingData['Middle_Aged'].fillna(missingData['Population']-missingData['Young_and_Adult']-missingData['Senior_Citizen']-missingData[' Age_Not_Stated'],inplace=True)

missingData['Middle_Aged'].fillna(missingData['Population']-missingData['Young_and_Adult']-missingData['Senior_Citizen']-missingData[' Age_Not_Stated'],inplace=True)



missingData.isnull().sum()

missingData.rename(columns={' Age_Not_Stated':'Age_Not_Started'},inplace=True)

missingData['Age_Not_Started'].fillna(missingData['Population']-missingData['Young_and_Adult']-missingData['Senior_Citizen']-missingData['Middle_Aged'],inplace=True)

missingData.isnull().sum()

copy4=missingData.copy()

missingData[missingData['Senior_Citizen'].isnull()]

#filling with mean values

missingData['Population'].fillna(missingData['Population'].mean(),inplace=True)

missingData['Male'].fillna(missingData['Male'].mean(),inplace=True)

missingData['Literate'].fillna(missingData['Literate'].mean(),inplace=True)

missingData['Literate_Male'].fillna(missingData['Literate_Male'].mean(),inplace=True)

missingData['Literate_Female'].fillna(missingData['Literate_Female'].mean(),inplace=True)

missingData['Households'].fillna(missingData['Households'].mean(),inplace=True)

missingData['Households_Rural'].fillna(missingData['Households_Rural'].mean(),inplace=True)

missingData['Households_Urban'].fillna(missingData['Households_Urban'].mean(),inplace=True)

missingData['Young_and_Adult'].fillna(missingData['Young_and_Adult'].mean(),inplace=True)

missingData['Middle_Aged'].fillna(missingData['Middle_Aged'].mean(),inplace=True)

missingData['Senior_Citizen'].fillna(missingData['Senior_Citizen'].mean(),inplace=True)

missingData['Age_Not_Started'].fillna(missingData['Senior_Citizen'].mean(),inplace=True)

finalDataCopy=missingData.copy()

missingData.info()

"""**Visualisation**"""

import seaborn as sns

#before
sns.heatmap(copy4.isnull())

census.isnull().sum()

import matplotlib.pyplot as plt
plt.figure(figsize=(7,7))
sns.displot(
    data=copy4.isna().melt(value_name="missing"),
    y="variable",
    hue="missing",
    multiple="fill",
    aspect=2.50
)

sns.heatmap(census.isnull())

sns.heatmap(copy4.isnull())

from google.colab import  drive
drive.mount('/drive')
finalDataCopy.to_csv()

